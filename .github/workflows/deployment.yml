name: Deployment

on:
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.short-sha.outputs.sha }}
      role: ${{ steps.role.outputs.role }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Define a Role
        id: role
        run: echo "role=${{ vars.CD_ROLE_ARN }}" >> "$GITHUB_OUTPUT"

        # This will cause the action to perform an AssumeRoleWithWebIdentity call and return temporary security credentials for use by other steps in your workflow.
        # In order for this to work, you'll need to preconfigure the IAM Identity Provider in your AWS account (see the OIDC section below for details).
      - uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ vars.CD_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        with:
          length: 6

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          push: true
          file: Dockerfile
          platforms: linux/amd64
          context: .
          tags: 533267353564.dkr.ecr.ap-northeast-1.amazonaws.com/surl-go:${{ steps.short-sha.outputs.sha }}
          cache-from: type=gha
          cache-to: type=gha

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ vars.CD_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ vars.SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 533267353564.dkr.ecr.ap-northeast-1.amazonaws.com
            sudo docker pull 533267353564.dkr.ecr.ap-northeast-1.amazonaws.com/surl-go:${{ needs.build-and-push.outputs.short-sha }}
            sudo docker stop surl-go || true
            sudo docker rm surl-go || true
            sudo docker run -d --name surl-go \
              -p 8080:8080 \
              --memory=750m \
              --memory-swap=750m \
              -e API_HOST=0.0.0.0 \
              -e API_PORT=8080 \
              -e API_VERSION=v1 \
              533267353564.dkr.ecr.ap-northeast-1.amazonaws.com/surl-go:${{ needs.build-and-push.outputs.short-sha }}
